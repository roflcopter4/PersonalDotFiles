" vim: set ft=vim sw=4 ts=4 sts=4 et tw=90

" ======================================================================================================
" ======================================================================================================
" =====  Plugin Setup =====  
" ======================================================================================================
" ======================================================================================================

if CYGWIN()
    let s:VimUsesjowerline = 0
    let s:NeVimUsesPowerline = 0
else
    let s:VimUsesPowerline = 0
    let s:NeoVimUsesPowerline = 0
endif

if (!has('nvim') && s:VimUsesPowerline == 1) || (has('nvim') && s:NeoVimUsesPowerline == 1)
    let s:UsePowerline = 1
endif

let g:use_ale = 1
let g:use_deoplete = 1
" let b:use_language_client = 1
let s:vim_ale = 1

filetype off

function! IsSourced(name)
    return dein#is_sourced(a:name)
endfunction

if LINUX() || CYGWIN() || BSD()
    let g:load_path=expand('~/.vim/dein')
    let g:dein_path=expand('~/.vim/dein/repos/github.com/Shougo/dein.vim')
    let &runtimepath = &runtimepath.','. g:dein_path
elseif WINDOWS()
    let g:load_path='C:/vim/dein'
    let g:dein_path='C:/Vim/dein/repos/github.com/Shougo/dein.vim'
    let &runtimepath = &runtimepath.','. g:dein_path
    if exists('g:ONI')
        let g:dein#cache_directory = g:load_path .'/ONI/'
    end
endif

if dein#load_state(expand(g:load_path))
    call dein#begin(expand(g:load_path))
    call dein#add(expand(g:dein_path))
    call dein#add('haya14busa/dein-command.vim')

    if has('nvim') && 0
        call dein#add('/usr/share/vim/vimfiles')
    endif

    "----------  My own stuff ---------- 
    call dein#add('roflcopter4/PersonalVimStuff', {'merged': 0})
    call dein#add('roflcopter4/vim-perl',  {'merged': 0})
    call dein#add('roflcopter4/vim-cpp-enhanced-highlight')

    if has('nvim')
        call dein#add('roflcopter4/tag-highlight.nvim', {'merged': 0})
        call dein#add('roflcopter4/lnvim', {'merged': 0})
        "call dein#add('c0r73x/neotags.nvim', {'merged': 0, 'build': 'make'})
        "call dein#add('roflcopter4/mytags', {'merged': 0})
        "call dein#add('blahgeek/neovim-colorcoder', {'merged': 0})
        "call dein#add('arakashic/chromatica.nvim', {'merged': 0})
    endif

    "----------  General ---------
    call dein#add('MarcWeber/vim-addon-mw-utils')
    call dein#add('ctrlpvim/ctrlp.vim')
    call dein#add('easymotion/vim-easymotion')
    call dein#add('gcmt/wildfire.vim')
    call dein#add('huawenyu/neogdb.vim')
    call dein#add('jiangmiao/auto-pairs')
    call dein#add('jistr/vim-nerdtree-tabs')
    call dein#add('kana/vim-textobj-indent')
    call dein#add('kana/vim-textobj-user')
    " Undotree is a bit broken
    "call dein#add('mbbill/undotree')
    call dein#add('osyo-manga/vim-over')
    call dein#add('powerline/fonts')
    call dein#add('rhysd/conflict-marker.vim')
    call dein#add('scrooloose/nerdtree')
    call dein#add('tacahiroy/ctrlp-funky')
    call dein#add('terryma/vim-multiple-cursors')
    call dein#add('tomtom/tlib_vim')
    call dein#add('tpope/vim-abolish.git')
    call dein#add('tpope/vim-repeat')
    call dein#add('tpope/vim-surround')
    call dein#add('vim-scripts/matchit.zip')
    call dein#add('vim-scripts/restore_view.vim')
    call dein#add('vim-scripts/sessionman.vim')

    " Writing -----
    call dein#add('reedes/vim-litecorrect')
    call dein#add('reedes/vim-textobj-quote')
    call dein#add('reedes/vim-textobj-sentence')
    call dein#add('reedes/vim-wordy')
    call dein#add('vim-pandoc/vim-pandoc')
    call dein#add('vim-pandoc/vim-pandoc-syntax')

    "----------  General Programming -----
    call dein#add('godlygeek/tabular')
    call dein#add('junegunn/vim-easy-align')
    call dein#add('majutsushi/tagbar')
    call dein#add('mattn/gist-vim')
    call dein#add('mattn/webapi-vim')
    call dein#add('scrooloose/nerdcommenter')
    call dein#add('vim-pandoc/vim-pandoc-syntax')
    call dein#add('tpope/vim-fugitive')

    "---------- PHP --------
    call dein#add('arnaud-lb/vim-php-namespace')
    call dein#add('beyondwords/vim-twig')
    call dein#add('spf13/PIV')

    "---------- Python ---------
    call dein#add('klen/python-mode')
    call dein#add('vim-scripts/python_match.vim')
    call dein#add('vim-scripts/pythoncomplete')
    call dein#add('yssource/python.vim')

    "---------- Javascript ----------
    call dein#add('briancollins/vim-jst')
    call dein#add('elzr/vim-json')
    call dein#add('groenewege/vim-less')
    call dein#add('kchmck/vim-coffee-script')
    call dein#add('pangloss/vim-javascript')

    "----------  Scala ---------
    call dein#add('derekwyatt/vim-sbt')
    call dein#add('derekwyatt/vim-scala')
    call dein#add('vim-scripts/xptemplate')

    "----------  Haskell ----------
    call dein#add('Twinside/vim-haskellConceal')
    call dein#add('Twinside/vim-haskellFold')
    call dein#add('adinapoli/cumino')
    call dein#add('bitc/vim-hdevtools')
    call dein#add('dag/vim2hs')
    call dein#add('eagletmt/ghcmod-vim')
    call dein#add('eagletmt/neco-ghc')
    call dein#add('lukerandall/haskellmode-vim')
    call dein#add('travitch/hasksyn')

    "----------  HTML ---------
    call dein#add('gorodinskiy/vim-coloresque')
    call dein#add('hail2u/vim-css3-syntax')
    call dein#add('tpope/vim-haml')

    "---------- Moar Languages ------
    call dein#add('chaimleib/vim-renpy')
    call dein#add('dag/vim-fish')
    call dein#add('fatih/vim-go')
    call dein#add('fsharp/vim-fsharp')
    call dein#add('gentoo/gentoo-syntax')
    call dein#add('rsmenon/vim-mathematica')
    call dein#add('rust-lang/rust.vim')
    call dein#add('dylon/vim-antlr.git', {'merged': 0})

    "---------- Misc ----------
    call dein#add('Chiel92/vim-autoformat')
    call dein#add('PProvost/vim-ps1')
    call dein#add('carlosgaldino/elixir-snippets')
    call dein#add('cespare/vim-toml')
    call dein#add('chrisbra/Colorizer')
    call dein#add('elixir-lang/vim-elixir')
    call dein#add('equalsraf/neovim-gui-shim')
    call dein#add('fidian/hexmode')
    call dein#add('idanarye/vim-vebugger')
    call dein#add('junegunn/fzf', {'merged': 0})
    call dein#add('junegunn/fzf.vim')
    call dein#add('mattreduce/vim-mix')
    call dein#add('quentindecock/vim-cucumber-align-pipes')
    call dein#add('rodjek/vim-puppet')
    call dein#add('saltstack/salt-vim')
    call dein#add('tpope/vim-cucumber')
    call dein#add('tpope/vim-markdown')
    call dein#add('vim-scripts/Vimball')
    call dein#add('mokkun/twine.vim')
    call dein#add('AndrewRadev/sideways.vim')
    call dein#add('gf3/peg.vim')

    "---------- Refactoring tools and such ----------
    call dein#add('uplus/vim-clang-rename')

    if !WINDOWS() "&& b:use_language_client
        call dein#add('autozimu/LanguageClient-neovim', {'merged': 0})
    endif
    call dein#add('Shougo/neosnippet.vim')
    call dein#add('Shougo/neosnippet-snippets')
    call dein#add('honza/vim-snippets')
    call dein#add('Shougo/context_filetype.vim')

    call dein#add('xolox/vim-misc')
    call dein#add('xolox/vim-shell')

    call dein#add('Shougo/vimproc.vim', {'merged': 0, 'build': 'make'})
    " call dein#add('vim-perl/vim-perl',  {'merged': 0, 'build': 'make -k contrib_syntax carp try-tiny '
    "                                                         \. 'method-signatures moose test-more'})

    if !exists('g:ONI')
        call dein#add('Yggdroot/indentLine')
    endif

    " call dein#add('Rip-Rip/clang_complete')

    if has('nvim')
        if g:use_ale == 1
            call dein#add('w0rp/ale', {'merged': 0})
        else
            call dein#add('neomake/neomake', {'merged': 0})
        endif
        if g:use_deoplete == 1
            call dein#add('Shougo/deoplete.nvim')
            call dein#add('Shougo/neco-vim')
            call dein#add('artur-shaik/vim-javacomplete2')
            call dein#add('zchee/deoplete-clang')
            call dein#add('zchee/deoplete-go', {'build': 'make', 'merged': 0})
            call dein#add('zchee/deoplete-jedi')
        else
            call dein#add('Valloric/YouCompleteMe',
                        \ {'merged': 0, 'build': 'python3 install.py --all'})
            call dein#add('rdnetto/YCM-Generator')
        endif
    else
        if exists('s:vim_ale') && s:vim_ale == 1
            call dein#add('w0rp/ale')
            call dein#add('Shougo/neco-vim')
            call dein#add('artur-shaik/vim-javacomplete2')
        endif

        if &encoding ==# 'utf-8'
            if has('python3') || has('nvim')
                call dein#add('Valloric/YouCompleteMe',
                            \ {'merged': 0, 'build': 'python3 install.py --all'})
                call dein#add('rdnetto/YCM-Generator')
            elseif has('python')
                call dein#add('Valloric/YouCompleteMe',
                            \ {'merged': 0, 'build': 'python2 install.py --all'})
                call dein#add('rdnetto/YCM-Generator')
            endif
        endif
    endif

    if (has('nvim') || !s:VimUsesPowerline) && !exists('g:ONI')
        call dein#add('vim-airline/vim-airline')
        call dein#add('vim-airline/vim-airline-themes')
    endif
    call dein#add('https://anongit.gentoo.org/git/proj/eselect-syntax.git')

    call dein#add('Shougo/unite.vim')


    "---------- Colour Schemes ----------------
    call dein#add('KeitaNakamura/neodark.vim')
    call dein#add('MaxSt/FlatColor')
    call dein#add('Valloric/vim-valloric-colorscheme')
    call dein#add('benjaminwhite/Benokai')
    call dein#add('crater2150/vim-theme-chroma')
    call dein#add('dunckr/vim-monokai-soda')
    call dein#add('iCyMind/NeoSolarized')
    call dein#add('jaromero/vim-monokai-refined')
    call dein#add('joshdick/onedark.vim')
    call dein#add('lanox/lanox-vim-theme')
    call dein#add('mhartington/oceanic-next')
    call dein#add('mhinz/vim-janah')
    call dein#add('morhetz/gruvbox')
    call dein#add('ratazzi/blackboard.vim')
    call dein#add('reewr/vim-monokai-phoenix')
    call dein#add('tyrannicaltoucan/vim-quantum')
    call dein#add('vim-scripts/darkspectrum')
    call dein#add('zanglg/nova.vim')

    call dein#local(expand('~/.vim/bundles/findent'))

    call dein#end()
    call dein#save_state()
endif


if exists('s:UsePowerline')
    let g:powerline_pycmd='py3'
    python from powerline.vim import setup as powerline_setup
    python powerline_setup()
    python del powerline_setup
    set laststatus=2    " Always display the statusline in all windows
    set showtabline=2   " Always display the tabline, even if there is only one tab
    set noshowmode      " Hide the default mode text (e.g. -- INSERT -- below the statusline)
endif

filetype plugin indent on
syntax enable


" ======================================================================================================
" ======================================================================================================
" ===== Plugin Config
" ======================================================================================================
" ======================================================================================================


if IsSourced('tabular')
    let g:DisableAutoPHPFolding = 0
    let g:PIVAutoClose = 0
endif


if IsSourced('matchit.zip')
    let b:match_ignorecase = 1
endif


if IsSourced('HTML-AutoCloseTag')
    " Make it so AutoCloseTag works for xml and xhtml files as well
    augroup HTML_CloseTag
        autocmd FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
    augroup END
    nmap <Leader>ac <Plug>ToggleAutoCloseMappings
endif


if IsSourced('ack.vim')
    if executable('ag')
        let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    elseif executable('ack-grep')
        let g:ackprg='ack-grep -H --nocolor --nogroup --column'
        call dein#add('mileszs/ack.vim')
    elseif executable('ack')
        call dein#add('mileszs/ack.vim')
    endif
endif


if IsSourced('nerdtree')
    noremap <leader>ee :NERDTreeTabsToggle<CR>
    noremap <leader>ef :NERDTreeFind<CR>

    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$',
                       \  '^\.hg$', '^\.svn$', '\.bzr$']
    let g:NERDTreeChDirMode=0
    let g:NERDTreeQuitOnOpen=1
    let g:NERDTreeMouseMode=2
    let g:NERDTreeShowHidden=1
    let g:NERDTreeKeepTreeInNewTab=1
    let g:NERDShutUp=1
    let g:nerdtree_tabs_open_on_gui_startup=0
endif


if IsSourced('tabular')
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
endif


set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
if IsSourced('sessionman.vim')
    nmap <leader>sl :SessionList<CR>
    nmap <leader>ss :SessionSave<CR>
    nmap <leader>sc :SessionClose<CR>
endif


nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
let g:vim_json_syntax_conceal = 0


if !has('python') && !has('python3')
    let g:pymode = 0
endif
if IsSourced('python-mode')
    let g:pymode_options = 1
    let g:pymode_lint = 0
    " let g:pymode_lint_checkers = ['pep8']
    "let g:pymode_lint_on_fly = 1
    let g:pymode_lint_cwindow = 0

    let g:pymode_breakpoint = 1
    let g:pymode_breakpoint_bind = '<leader>b'
    let g:pymode_doc = 1
    let g:pymode_doc_bind = 'K'
    let g:pymode_indent = 1
    let g:pymode_options_colorcolumn = 0
    let g:pymode_options_max_line_length = 79
    let g:pymode_python = 'python'
    " let g:pymode_rope = 0
    let g:pymode_run = 1
    let g:pymode_run_bind = '<leader>r'
    let g:pymode_syntax = 1
    let g:pymode_syntax_all = 1
    let g:pymode_syntax_docstrings = g:pymode_syntax_all
    let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
    let g:pymode_trim_whitespaces = 0
endif


if IsSourced('ctrlp.vim')
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <silent> <D-t> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
                    \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$'
                \ }

    if executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack-grep')
        let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
        " On Windows use "dir" as fallback command.
    elseif WINDOWS()
        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif
    if exists('g:ctrlp_user_command')
        unlet g:ctrlp_user_command
    endif
    let g:ctrlp_user_command = {
                \     'types': {
                \         1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \         2: ['.hg', 'hg --cwd %s locate -I .'],
                \     },
                \     'fallback': s:ctrlp_fallback
                \ }

    if IsSourced('ctrlp-funky')
        " CtrlP extensions
        let g:ctrlp_extensions = ['funky']
        " funky
        nnoremap <Leader>fu :CtrlPFunky<Cr>
    endif

    if filereadable(expand('~/personaldotfiles/.Vim/ctrlp.vim'))
        :source ~/personaldotfiles/.Vim/ctrlp.vim
    endif
endif


if IsSourced('tagbar')
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
endif


if IsSourced('rainbow') || 1
    let g:rainbow_active = 1
    " God, what a horrific mess.

        "\    'guifgs': ['DodgerBlue1', 'chartreuse3', 'darkorange1',  'firebrick1', 'orchid2'],
        "\    'guifgs': ['DodgerBlue1', 'darkorange1', 'green2', 'firebrick1'],
        "\    'operators': '_,_',
        "\        'c': {
        "\            'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'firebrick1', 'orchid2', 'gold1'],
        "\        },
        "        \            'parentheses': ['start=/(/ end=/)/ fold',
        "        \                            'start=/{/ end=/}/ fold'],
        "\    'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'darkorange1', 'firebrick1', 'orchid2'],

    let g:rainbow_conf = {
        \    'guifgs': ['Tomato', 'Cyan3', 'HotPink1', 'PeachPuff2'],
        \    'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
        \    'operators': '',
        \    'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \    'separately': {
        \        '*': {},
        \        'tex': {
        \            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
        \        },
        \        'lisp': {
        \            'guifgs': ['DeepSkyBlue2', 'chartreuse3', 'darkorange1',  'firebrick1', 'orchid2', 'gold1', 'cyan1'],
        \        },
        \        'vim': {
        \            'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold',
        \                            'start=/(/ end=/)/ containedin=vimFuncBody',
        \                            'start=/\[/ end=/\]/ containedin=vimFuncBody',
        \                            'start=/{/ end=/}/ fold containedin=vimFuncBody'],
        \        },
        \        'html': {
        \            'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem'.
        \                            '|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'.
        \                            "'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
        \        },
        \        'perl': {
        \            'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'firebrick1', 'orchid2'],
        \        },
        \        'cpp': {
        \            'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'darkorange1', 'gold1', 'orchid2'],
        \            'parentheses': ['start=/(/ end=/)/ fold',
        \                            'start=/{/ end=/}/ fold'],
        \        },
        \        'css': 0
        \    }
    \}

    " \ 'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'darkorange1', 'orchid2', 'orange'],
                " \ 'guifgs': ['orangered', 'MediumOrchid2', 'darkorange2', 'DeepPink2'],
    " let g:rainbow_conf['c'] = {
                " \ 'guifgs': ['Tomato', 'Cyan3', 'VioletRed1', 'PeachPuff2'],
    " call extend(g:rainbow_conf['separately'], { 'c': {
    "             \ 'guifgs': ['Sienna2', 'DarkTurquoise',  'Magenta', 'goldenrod1'],
    "             \ 'parentheses': ['start=/(/ end=/)/ fold',
    "             \                 'start=/{/ end=/}/ fold'],
    "             \ } })
    call extend(g:rainbow_conf['separately'], { 'go': {
                \ 'guifgs': ['Sienna2', 'DarkTurquoise',  'Magenta', 'goldenrod1'],
                \ 'parentheses': ['start=/(/ end=/)/ fold',
                \                 'start=/{/ end=/}/ fold'],
                \ } })
    " let g:rainbow_conf['c'] = {
    "             \ 'guifgs': ['chartreuse3', 'DeepSkyBlue2', 'darkorange1', 'gold1', 'orchid2'],
    "             \ }

    nnoremap <leader>rnt :RainbowToggle<CR>
    nnoremap <leader>rnr :RainbowToggle<CR> :RainbowToggle<CR>
endif


if IsSourced('vim-fugitive')
    nnoremap <silent> <leader>gs :Gstatus<CR>count(g:spf13_bundle_groups, 'neocomplcache')
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
    nnoremap <silent> <leader>gg :SignifyToggle<CR>
endif


if IsSourced('neocomplcache') || IsSourced('neocomplete')
    " Use honza's snippets.
    let g:neosnippet#snippets_directory='C:Vim/dein/repos/github.com/vim-snippets/snippets'
    let g:neosnippet#enable_snipmate_compatibility = 1
    " For snippet_complete marker.
    if !exists('g:spf13_no_conceal')
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    endif
    let g:go_snippet_engine = 'neosnippet'
    set completeopt-=preview
endif


if IsSourced('undotree')
    nnoremap <Leader>u :UndotreeToggle<CR>
    let g:undotree_SetFocusWhenToggle = 1
endif


if IsSourced('vim-indent-guides')
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 0
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_auto_colors = 1
    let g:indent_guides_color_change_percent = 30
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#808080
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#465457
endif


if IsSourced('wildfire.vim')
    let g:wildfire_objects = {
                \ '*' : ["i'", 'i"', 'i)', 'i]', 'i}', 'ip'],
                \ 'html,xml' : ['at'],
                \ }
endif


if IsSourced('vim-airline')
    if CYGWIN() || WINDOWS()
        let g:airline_powerline_fonts = 0
    else
        let g:airline_powerline_fonts = 1
    endif

    let g:airline_section_z = '%p%%%{g:airline_symbols.maxlinenr}%3l/%L :%v'
    let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#whitespace#checks = [ 'trailing', 'indent', 'long', 'mixed-indent-file' ]

    let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

    " let g:airline#extensions#tabline#fnametruncate = 7
    let g:airline#extensions#tabline#fnamemod = ':t'
    let airline#extensions#tabline#middle_click_preserves_windows = 1

    nnoremap <silent> <leader>al :AirlineRefresh<CR>
    if IsSourced('vim-airline-themes') && $TERM !=# 'linux'
        "let g:airline_theme = 'molokai'
        let g:airline_theme = 'papercolor'
    endif

    nnoremap <silent> <leader>bn :bp<CR>:call airline#update_statusline()<CR>
    nnoremap <silent> <leader>bm :bn<CR>:call airline#update_statusline()<CR>

else
    augroup Airline
        au!
    augroup END

    nnoremap <silent> <leader>bn :bp<CR>
    nnoremap <silent> <leader>bm :bn<CR>
endif


if IsSourced('neomake')
    " let g:neomake_c_lint_maker = {
    "     \ 'exe': 'lint',
    "     \ 'args': ['--option', 'x'],
    "     \ 'errorformat': '%f:%l:%c: %m',
    "     \ }
    " let g:neomake_error_sign = {
    "             \ 'text': '>>',
    "             \ 'texthl': 'ErrorMsg',
    "             \ }
    " hi MyWarningMsg ctermbg=3 ctermfg=0
    " let g:neomake_warning_sign = {
    "             \ 'text': '>>',
    "             \ 'texthl': 'MyWarningMsg',
    "             \ }
    " Disable inherited syntastic
    " let g:syntastic_mode_map = {
    "     \ 'mode': 'passive',
    "     \ 'active_filetypes': [],
    "     \ 'passive_filetypes': []
    "     \ }
    "
    " let g:neomake_serialize = 1
    " let g:neomake_serialize_abort_on_error = 1
    " let g:neomake_highlight_lines = 1
    " let g:neomake_place_signs=0
    " let g:neomake_verbose=2
    " let g:neomake_echo_current_error=1
    " let g:neomake_open_list=0
    let g:neomake_c_enabled_makers=['gcc', 'clangcheck', 'clangtidy']
    " let g:neomake_c_enabled_makers=['clangcheck']
    " let g:neomake_c_enabled_makers=['clangtidy']
    " let g:neomake_make_maker = {
    "     \ 'exe': 'make',
    "     \ 'args': ['--build'],
    "     \ 'errorformat': '%f:%l:%c: %m',
    "     \ }
    "
    " augroup my_neomake_highlights
    "     au!
    "     autocmd ColorScheme *
    "       \ hi link NeomakeError SpellBad |
    "       \ hi link NeomakeWarning SpellCap
    " augroup END
    "
    " autocmd! BufReadPost,BufWritePost * Neomake

    if filereadable(expand('~/personaldotfiles/.Vim/neomake.vim'))
        :source ~/personaldotfiles/.Vim/neomake.vim
    endif
endif


if IsSourced('ale')
    let g:airline#extensions#ale#enabled = 1
    let g:ale_lint_on_text_changed = 1
    let g:ale_sign_column_always = 1
    let g:ale_lint_on_insert_leave = 0
    let g:ale_linters_explicit = 0
    let g:ale_open_list = 0
    let g:ale_list_window_size = 4
    let g:ale_sh_shell_default_shell = 'sh'
    let g:ale_c_parse_makefile = 0

    let g:ale_nasm_nasm_options = '-felf64 "-I./inc/"'

    " No stupid popup windows
    let g:ale_loclist_msg_format = ''

    let g:ale_c_make_command = 'fmake -n'

    function! Find_File_Cwd()
        return fnamemodify(expand('%:p'), ':h')
    endfunction

    "# C, C++, C# {
        let g:ale_c_gcc_options   = '-Wall -Wpedantic -Wextra -Wformat -Iinc -Iinclude -I.. -std=gnu11'
        let g:ale_c_clang_options = g:ale_c_gcc_options . '-Wno-gnu-binary-literal'
        " let g:ale_c_clang_options = '-Wall -Wextra -Iinc -I. -I.. -Iinclude -I/usr/local/include -I../inc -I../include $(bmake -n | ag -o -- ''-I\S+'' | sort -u | perl -pe ''s/\n/ /g'')'
        let g:ale_c_clangtidy_checks = ['*',
                                      \ '-*-braces-around-statements',
                                      \ '-android*',
                                      \ '-readability-avoid-const-params-in-decls',
                                      \ '-llvm-header-guard',
                                      \ '-hicpp-signed-bitwise',
                                      \ '-*disabled-macro-expansion',
                                      \ '-*c++98-compat',
                                      \ '-*avoid-magic-numbers', '-*readability-magic-numbers',
                                      \ '-*pro-type-union-access',
                                      \ '-*uppercase-literal-suffix',
                                      \ '-*gnu-zero-variadic-macro-arguments',
                                      \ '-*narrowing-conversions',
                                      \ '-*gnu-statement-expression',
                                      \ ]

        let g:ale_cpp_gcc_options = '-Wall -Wpedantic -Wextra -Iinc -Iinclude -I.. -std=gnu++17'
        let g:ale_cpp_clang_options = g:ale_cpp_gcc_options

        let g:ale_cpp_clangtidy_checks = (g:ale_c_clangtidy_checks)
        call extend(g:ale_cpp_clangtidy_checks, [
                    \   '-*pointer-arithmetic*',
                    \   '-*fuchsia*',
                    \   '-*implicit-bool*',
                    \   '-*vararg',
                    \   '-*owning-memory'
                    \ ])

        " let s:ALE_C = ['gcc', 'clangtidy', 'cppcheck', 'flawfinder']
        " let s:ALE_C = ['clang', 'clangtidy', 'cppcheck']
        " let s:ALE_C = ['gcc', 'clangtidy', 'cppcheck']
        let s:ALE_C = ['gcc', 'clangtidy', 'cppcheck']

        let b:ale_linters_c = {'c': s:ALE_C,
                             \ 'cpp': ['clang', 'gcc', 'clangtidy', 'cppcheck']
                             \ }

    "# Python {
        let b:ale_linters_py = {'python': ['flake8', 'pyflakes']}
        " let b:ale_linters_py = {'python': ['flake8', 'pyflakes', 'mypy']}
        " let b:ale_linters_py = {'python': ['mypy', 'prospector', 'pyls', 'pyflakes', 'pep8']}
        " let b:ale_linters_py = {'python': ['mypy', 'prospector', 'pyflakes', 'pep8']}
        let g:ale_python_pylint_executable = '/dev/null'   " FUCK PYLINT
        let g:ale_python_flake8_options = '--ignore=E121,E123,E126,E226,E24,E704,W503,W504,E501'

    "# Perl {
        let b:ale_linters_perl = {'perl': ['perl']}
        let g:ale_perl_perlcritic_options = '-4'

    "# Go {
        let b:ale_linters_go = {'go': ['go vet', 'gofmt']}

    let g:ale_linters =  {}
    call extend(g:ale_linters, b:ale_linters_c)
    call extend(g:ale_linters, b:ale_linters_py)
    call extend(g:ale_linters, b:ale_linters_perl)
    call extend(g:ale_linters, b:ale_linters_go)

    augroup CloseLoclistWindowGroup
        autocmd!
        autocmd QuitPre * if empty(&buftype) | lclose | endif
    augroup END


    let g:ale_linter_aliases = {'csh': 'sh'}

    if filereadable(expand('~/personaldotfiles/.Vim/ale.vim'))
        :source ~/personaldotfiles/.Vim/ale.vim
    endif
endif


if IsSourced('vim-vebugger')
    let g:vebugger_leader='<Leader>d'
endif


if IsSourced('vim-easytags')
    let g:easytags_python_enabled = 0
    let g:easytags_dynamic_files = 2
    set tags=./tags;
    let &cpoptions .= 'd'
    nnoremap <leader>tag :UpdateTags<CR>
    nnoremap <leader>tah :HighlightTags<CR>
    let g:easytags_autorecurse = 1
    let g:easytags_include_members = 1
    let g:easytags_async = 1
    "let g:easytags_always_enabled = 1

    let g:easytags_languages = {
    \   'c': {
    \       'args': ['--fields=+l', '--c-kinds=*']
    \   }
    \}

    highlight def link cMember perlSpecialChar2
    highlight def link shFunctionTag Type
    highlight def link cEnumTag Enum
    highlight def link cMemberTag CMember
    highlight def link cPreProcTag PreProc
    highlight def link cFunctionTag CFuncTag
endif


if IsSourced('deoplete.nvim')
    let g:deoplete#enable_at_startup = 1
    " if !exists('g:deoplete#omni#input_patterns')
        " let g:deoplete#omni#input_patterns = {}
    " endif
    " if filereadable(expand('~/personaldotfiles/.Vim/deoplete.vim'))
    "     :source ~/personaldotfiles/.Vim/deoplete.vim
    " endif

    " deoplete tab-complete
    inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
    " Use smartcase.
    let g:deoplete#enable_smart_case = 1

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
        return deoplete#close_popup() . "\<CR>"
    endfunction

    " let s:libclang_path = '/usr/lib64/llvm/7/lib64/libclang.so'
    let s:libclang_path = '/usr/lib64/llvm/6/lib64/libclang.so'

    if IsSourced('zchee/deoplete-clang')
        g:deoplete#sources#clang#libclang_path = s:libclang_path
        g:deoplete#sources#clang#clang_header = '/usr/lib64/clang'
    endif

    if IsSourced('zchee/deoplete-go')
        let g:deoplete#sources#go#gocode_binary = exepath('gocode')
        let g:deoplete#sources#go#cgo = 1
        let g:deoplete#sources#go#cgo#libclang_path = s:libclang_path
        let g:deoplete#sources#go#auto_goos = 1
        set completeopt+=noselect
    endif
endif


if IsSourced('YouCompleteMe')
    let g:acp_enableAtStartup = 0

    if CYGWIN()
        let g:ycm_server_python_interpreter='/c/bin/python3'
    else
        if has('nvim')
            let g:ycm_server_python_interpreter='/usr/bin/env python3'
        endif
        if executable('/usr/bin/python2') && has('python')
            let g:ycm_server_python_interpreter='/usr/bin/env python2'
        elseif executable('/usr/local/bin/python3') && has('python3')
            let g:ycm_server_python_interpreter='/usr/bin/env python3'
        endif
    endif
    "# enable completion from tags
    let g:ycm_collect_identifiers_from_tags_files = 1
    "# remap Ultisnips for compatibility for YCM
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsJumpForwardTrigger = '<C-j>'
    let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

    "# Enable omni completion.
    augroup YcmOmniVimrc
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
    augroup END

    "# Haskell post write lint and check with ghcmod
    "# $ `cabal install ghcmod` if missing and ensure ~/.cabal/bin is in your $PATH.
    if !executable('ghcmod')
        augroup YcmGhcMod
            autocmd BufWritePost *.hs GhcModCheckAndLintAsync
        augroup END
    endif

    " For snippet_complete marker.
    if !exists('g:spf13_no_conceal')
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    endif

    let g:ycm_global_ycm_extra_conf = expand('~/.vim/ycm_extra_conf.py')

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise, especially when splits are used.
    set completeopt-=preview
endif


if IsSourced('indentLine')
    if exists('g:ONI')
        let g:indentLine_loaded = 0
    endif
    if WINDOWS() && !$NVIM_QT
        let g:indentLine_char = '│'
    else
        let g:indentLine_char = '│'
    endif

    let g:indentLine_enabled = 0

    "let g:indentLine_setColors = 0
    let g:indentLine_color_gui = '#7E8E91'
    "let g:indentLine_enabled = 1
    nmap <silent> <leader>il :IndentLinesToggle<CR>
endif


if IsSourced('vim-autoformat')
    augroup c_formatting
        autocmd FileType c,cpp,cs,c++ setlocal cindent sw=8 sts=8
        autocmd FileType go setlocal cindent sw=6 sts=6 ts=6 noexpandtab
    augroup END
    let g:__c__shiftwidth = 8

    "# astyle {
        let g:_Astyle_Main_ = ''
            \ . ' --indent=spaces=' . g:__c__shiftwidth
            \ . ' --pad-oper'
            \ . ' --preserve-date'
            \ . ' --pad-header'
            \ . ' --max-code-length=180'
            \ . ' --break-one-line-headers'
            \ . ' --remove-braces'

        let g:_Astyle_KR_     = '"astyle --style=kr'     . g:_Astyle_Main_
        let g:_Astyle_Allman_ = '"astyle --style=allman' . g:_Astyle_Main_

        let g:_Astyle_c_      = ' --mode=c"'
        let g:_Astyle_cpp_    = ' --mode=c --indent-namespaces"'
        let g:_Astyle_cs_     = ' --mode=cs --indent-namespaces"'
    "}

    "# clang-format {
        if len(findfile('.clang-format', expand('%:p:h').';'))
            let s:ClangFile = findfile('.clang-format', expand('%:p:h').';')
        elseif len(findfile('_clang-format', expand('%:p:h').';'))
            let s:ClangFile = findfile('_clang-format', expand('%:p:h').';')
        elseif filereadable(expand('~/.clang-format'))
            let s:ClangFile = expand('~/.clang-format')
        endif

        function! g:ZeroIsOneThousand()
            if &textwidth ==# 0
                return 1000
            else
                return &textwidth
            endif
        endfunction

        if exists('s:ClangFile')
            let g:formatdef_clangformat = "'clang-format -SCustom -i'.&shiftwidth.' -l'.ZeroIsOneThousand().' -- "
                                      \ . "-lines='.a:firstline.':'.a:lastline.' "
                                      \ . "--assume-filename=\"'.expand('%:p').'\"'"
        endif
    "# }

    "--------------------------------------------------------------------------------------

    "# C {
        let g:formatdef_astyle_c    = g:_Astyle_Allman_ . g:_Astyle_c_
        let g:formatdef_astyle_c_KR = g:_Astyle_KR_     . g:_Astyle_c_
        let g:formatters_c          = ['clangformat', 'astyle_c_KR', 'astyle_c']
    "# }

    "# C++ {
        let g:formatdef_astyle_cpp    = g:_Astyle_Allman_ . g:_Astyle_cpp_
        let g:formatdef_astyle_cpp_KR = g:_Astyle_KR_     . g:_Astyle_cpp_
        let g:formatters_cpp          = ['clangformat', 'astyle_cpp_KR', 'astyle_cpp']
    "# }

    "# C-sharp {
        let g:formatdef_astyle_cs    = g:_Astyle_Allman_ . g:_Astyle_cs_
        let g:formatdef_astyle_cs_KR = g:_Astyle_KR_     . g:_Astyle_cs_
        let g:formatters_cs          = ['clangformat', 'astyle_cs_KR', 'astyle_cs']
    "# }

    "# Perl {
        let g:formatdef_perltidy = '"perltidy -q --perl-best-practices --format-skipping -sbl"'
    "# }
    
    "# Python {
        let g:formatters_python = ['yapf', 'autopep8']
    "# }

    "# Some generic options
    let g:autoformat_autoindent = 0
    let g:autoformat_retab = 0
    let g:autoformat_remove_trailing_spaces = 0
    let g:autoformat_verbosemode = 1
endif


if IsSourced('numbers.vim') || IsSourced('PersonalVimStuff')
    nnoremap <leader>nr :NumbersToggle<CR>
    let g:enable_numbers = 0
    "let g:numbers_default_norelative = 1
endif


if IsSourced('neotags.nvim')
    let g:neotags_enabled = 1
    let g:neotags_highlight = 1
    let g:neotags_run_ctags = 1
    let g:neotags_verbose = 1
    let g:neotags_recursive = 1
    let g:neotags_no_autoconf = 1
    let g:neotags_use_binary = 1
    let g:neotags_strip_comments = 1
    if LINUX() || WINDOWS()
        let g:neotags_compression_type = 'lzma'
    elseif BSD() || CYGWIN()
        let g:neotags_compression_type = 'gzip'
    else
        echom 'Setup your damn compression settings you moron!'
    endif
    let g:neotags_use_compression = 1

    let g:neotags#c#order = 'guesfdtmv'
    " let g:neotags#c#order = 'uesgfdmt'
    " let g:neotags#cpp#order = 'umesgfdtc'

    highlight link neotags_EnumTag	Enum
    highlight link neotags_FunctionTag	CFuncTag
    highlight link neotags_MemberTag	CMember
    highlight link neotags_GlobalVarTag	CMember
    " highlight link neotags_PreProcTag	PreProc
    " highlight link neotags_PreProcTag	StorageClass
    " highlight link neotags_TypeTag	Type

    highlight link goConstantTag	Enum
    highlight link pythonGlobalVarTag	Constant

    set tags=./tags;,../tags

    let g:neotags_norecurse_dirs = [
                        \     $HOME, '/', '/include', '/usr/include', '/usr/share', '/usr/local/include',
                        \     '/usr/local/share', '/tmp', '/usr/src', '/usr/ports', '/usr/dports',
                        \     expand('~/personaldotfiles'),  expand('~/random'),    expand('~/random/Code'),
                        \     expand('~/random/school'),     expand('~/Downloads'), expand('~/documents'),
                        \ ]
    " let g:neotags_norecurse_dirs = []

    " let g:neotags_ignored_tags#c = [
    "                     \     'restrict', 'static',  'extern',   'const',   'inline',     '__attribute__',
    "                     \     'BUFSIZ',   'bool',    'true',     'false',   'EOF',        'reallocarray',
    "                     \     'NULL',     'void',    'xmalloc',  'xcalloc', 'xrealloc',   'xreallocarray',
    "                     \     'malloc',   'calloc',  'realloc',  'INT_MAX', 'UINT_MAX',   'read', 'if',
    "                     \     'nmalloc',  'xfree',   'nrealloc', '_Bool',   '__restrict', 'stdin', 'stdout', 'stderr',
    "                     \     'fopen', 'fclose', 'printf', 'fprintf', 'sprintf', 'snprintf', 'asprintf', 'getc', 'scanf',
    "                     \     'getline', 'fread', 'fwrite',
    "                     \ ]
    " let g:neotags_ignored_tags#cpp = g:neotags_ignored_tags#c
    let g:neotags_ignored_tags = {
                \   'c': ['xmalloc', 'xcalloc', 'xrealloc', 'xreallocarray', 'nmalloc', 'nrealloc', '_Bool',
                \         'malloc', 'calloc', 'realloc', 'reallocarray', 'free', 'xfree', '__attribute__', 'TRUE', 'FALSE']
                \ }

    " let g:neotags_restored_groups = {}
    let g:neotags_restored_groups = {
                \     'c':   ['cConstant', 'cStorageClass', 'cConditional', 'cRepeat', 'cType', 'cAnsiFunction'],
                \     'cpp': ['cConstant', 'cStorageClass', 'cConditional', 'cRepeat', 'cType',
                \             'cppStorageClass', 'cppType', 'cppAuto'],
                \     'go':  ['goExtraConstants', 'goStdlibFuncs']
                \ }

    nmap <leader>tag :NeotagsToggle<CR>
endif


" if IsSourced('mytags')
"     let g:mytags#enabled = 1
"     let g:mytags#highlight = 1
"     let g:mytags#run_ctags = 1
"     let g:mytags#verbose = 1
"     let g:mytags#recursive = 1
"     let g:mytags#no_autoconf = 1
"     let g:mytags#use_binary = 1
"     let g:mytags#strip_comments = 1
"     " if LINUX() || WINDOWS()
"     "     let g:mytags#compression_type = 'lzma'
"     " elseif BSD() || CYGWIN()
"     "     let g:mytags#compression_type = 'gzip'
"     " else
"     "     echom 'Setup your damn compression settings you moron!'
"     " endif
" 
"     let g:mytags#compression_type = 'gzip'
" 
"     let g:mytags#c#order = 'guesfdtmv'
" 
"     highlight link mytags_EnumTag	Enum
"     highlight link mytags_FunctionTag	CFuncTag
"     highlight link mytags_MemberTag	CMember
"     " highlight link mytags_GlobalVarTag	CMember
"     highlight link mytags_GlobalVarTag	GlobalVarTag
" 
"     highlight link goConstantTag	Enum
"     highlight link pythonGlobalVarTag	Constant
" 
"     set tags=./tags,../tags
" 
"     let g:mytags#norecurse_dirs = [
"                         \     $HOME, '/', '/include', '/usr/include', '/usr/share', '/usr/local/include',
"                         \     '/usr/local/share', '/tmp', '/usr/src', '/usr/ports', '/usr/dports',
"                         \     expand('~/personaldotfiles'),  expand('~/random'),    expand('~/random/Code'),
"                         \     expand('~/random/school'),     expand('~/Downloads'), expand('~/documents'),
"                         \ ]
" 
"     let g:mytags#ignored_tags = {
"                 \   'c': ['xmalloc', 'xcalloc', 'xrealloc', 'xreallocarray', 'nmalloc', 'nrealloc', '_Bool',
"                 \         'malloc', 'calloc', 'realloc', 'reallocarray', 'free', 'xfree', '__attribute__', 'TRUE', 'FALSE']
"                 \ }
" 
"     let g:mytags#ignored_tags['cpp'] = g:mytags#ignored_tags['c']
" 
"     let g:mytags#restored_groups = {
"                 \     'c':   ['cConstant', 'cStorageClass', 'cConditional', 'cRepeat', 'cType', 'cAnsiFunction', 'cStatement'],
"                 \     'cpp': ['cConstant', 'cStorageClass', 'cConditional', 'cRepeat', 'cType',
"                 \             'cppStorageClass', 'cppType', 'cppAuto'],
"                 \ }
" 
"     nmap <leader>mag :MytagsToggle<CR>
" endif


if IsSourced('neovim-colorcoder')
    let g:colorcoder_enable_filetypes = ['c', 'cpp', 'python']
endif


if IsSourced('vim-cpp-enhanced-highlight')
    " let g:cpp_member_variable_highlight = 1
    let g:cpp_class_scope_highlight = 0
    " let g:cpp_class_decl_highlight = 1
    " let g:cpp_member_variable_highlight = 1
    " let g:cpp_experimental_simple_template_highlight = 1
    " let g:cpp_experimental_template_highlight = 1
    " let g:cpp_concepts_highlight = 1
    " let g:cpp_no_function_highlight = 1
    hi! link cppSTLfunction mutedFunc
    hi! link cAnsiFunction mutedFunc
endif


if IsSourced('auto-pairs')
    let g:AutoPairsFlyMode = 1
endif


if IsSourced('vim-over')
    " Bring up over command line with substitute and very magic mode already typed
    nnoremap <silent> <leader>os :OverCommandLine<CR>%s/\v
    nnoremap <silent> <leader>oo :OverCommandLine<CR>
endif


if IsSourced('vim-easymotion')
    map , <Plug>(easymotion-prefix)
endif


if IsSourced('vim-pandoc')
endif


if IsSourced('LanguageClient-neovim')
    let g:LanguageClient_serverCommands = {
          \     'cpp': ['cquery', '--log-all-to-stderr', '--record=/home/bml/recorded.log', '--log-file=/tmp/cquery.log', '--init={"cacheDirectory":"'.expand('~/.cache/cquery').'"}'],
          \     'c':   ['cquery', '--log-all-to-stderr', '--record=/home/bml/recorded.log', '--log-file=/tmp/cquery.log', '--init={"cacheDirectory":"'.expand('~/.cache/cquery').'"}'],  
          \     'rust': ['rustup', 'run', 'nightly', 'rls'],
          \     'python': ['/usr/local/bin/pyls'],
          \     'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
          \     'javascript.jsx': ['tcp://127.0.0.1:2089'],
          \ }

    " let g:LanguageClient_diagnosticsEnable = 1
    " let g:LanguageClient_trace = 'verbose'
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_changeThrottle = 1.0
    let g:LanguageClient_hoverPreview = 'Never'
    " let g:LanguageClient_loggingLevel = 'DEBUG'
    " let g:LanguageClient_loggingFile = expand('~/lang_client.log')

    " let g:LanguageClient_loadSettings = 1 " Use an absolute configuration path if you want system-wide settings
    " let g:LanguageClient_settingsPath = expand('~/.config/nvim/settings.json')
    " set completefunc=LanguageClient#complete
    " set formatexpr=LanguageClient_textDocument_rangeFormatting()

    " augroup MyLanguageClientConfig
    "     au BufEnter * let b:Plugin_LanguageClient_started = 0
    "     au User LanguageClientStarted setl signcolumn=yes
    "     au User LanguageClientStarted let b:Plugin_LanguageClient_started = 1
    "     au User LanguageClientStopped setl signcolumn=auto
    "     au User LanguageClientStopped let b:Plugin_LanguageClient_stopped = 0
    "     au CursorMoved * if b:Plugin_LanguageClient_started | call LanguageClient_textDocument_hover() | endif
    "     au BufNew,BufAdd,BufCreate *.[ch] :LanguageClientStart<CR>
    " augroup END

    nn <silent> <M-.> :call LanguageClient_textDocument_definition()<cr>
    nn <silent> <M-,> :call LanguageClient_textDocument_references()<cr>
    nn <f2> :call LanguageClient_textDocument_rename()<cr>
    nn <leader>ji :Denite documentSymbol<cr>
    nn <leader>jI :Denite workspaceSymbol<cr>

    nn ,la :call LanguageClient_workspace_symbol({'query':input('workspace/symbol ')})<cr>
    nnoremap <silent> <leader>h :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> <leader>gh :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> <leader>gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <silent> <leader>gr :call LanguageClient_textDocument_references()<CR>
    nnoremap <silent> <leader>gs :call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <silent> <leader><F2> :call LanguageClient_textDocument_rename()<CR>
endif


if IsSourced('unite.vim')
    if filereadable(expand('~/personaldotfiles/.Vim/unite.vim'))
        :source ~/personaldotfiles/.Vim/unite.vim
    endif
endif


if IsSourced('nerdcommenter')
    let g:NERDCompactSexyComs = 1
    let g:NERDCommentEmptyLines = 1
    let g:NERDSpaceDelims = 1
    let g:NERDRemoveExtraSpaces = 1
    imap <C-c> <plug>NERDCommenterInsert
    nmap <leader>ci <plug>NERDCommenterInsert
    nmap <leader>ce <plug>NERDCommenterAppend
    map <leader>cd <plug>NERDCommenterInvert

    let g:NERDCustomDelimiters = {
                \ 'perl': { 'left': '#', 'rightAlt': '*/', 'leftAlt': '/*' }
                \ }

    function! FixNerdSpaces()
        if &filetype ==# 'python'
            let g:NERDSpaceDelims = 0
        else
            let g:NERDSpaceDelims = 1
        endif
    endfunction

    augroup NerdCommentSpaces
        autocmd BufEnter * call FixNerdSpaces()
    augroup END
endif


if IsSourced('clang_complete')
    " let g:clang_library_path = '/usr/lib64/llvm/7/lib64/libclang.so.7'
    let g:clang_library_path = '/usr/lib64/llvm/6/lib64/libclang.so'
endif


if IsSourced('vim-go')
    let g:go_highlight_format_strings = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_operators = 1
    let g:go_metalinter_autosave_enabled = []
    let g:go_info_mode = 'guru'
endif


if IsSourced('chromatica.nvim')
    let g:chromatica#libclang_path     = '/usr/lib64/llvm/6/lib64/libclang.so'
    let g:chromatica#enable_at_startup = 1
    let g:chromatica#responsive_mode   = 1
    let g:chromatica#responsive_mode   = 1
    let g:chromatica#enable_log        = 1
endif


"""" SEARCHFORME
if IsSourced('tag-highlight.nvim')
    let g:tag_highlight#enabled = 1
    let g:tag_highlight#highlight = 1
    let g:tag_highlight#run_ctags = 1
    let g:tag_highlight#verbose = 0
    let g:tag_highlight#recursive = 1
    let g:tag_highlight#no_autoconf = 1
    let g:tag_highlight#use_binary = 1
    let g:tag_highlight#strip_comments = 1
    let g:tag_highlight#compression_type = 'lzma'
    " let g:tag_highlight#compression_type = 'gzip'
    let g:tag_highlight#compression_level = 9
    let g:tag_highlight#c#order = 'guesfdmvt'

    let g:tag_highlight#norecurse_dirs = [
                        \     $HOME, '/', '/include', '/usr/include', '/usr/share', '/usr/local/include',
                        \     '/usr/local/share', '/tmp', '/usr/src', '/usr/ports', '/usr/dports',
                        \     expand('~/personaldotfiles'),  expand('~/random'),    expand('~/random/Code'),
                        \     expand('~/random/school'),     expand('~/Downloads'), expand('~/documents'),
                        \ ]

    let g:tag_highlight#ignored_tags = {
                \   'c': ['static_assert', 'malloc', 'calloc', 'realloc', 'reallocarray', 'free',
                \         '__attribute__', 'TRUE', 'FALSE', 'auto_type', '__auto_type', '__extension__', 'fork',
                \         'alignof', 'alignas', 'Auto']
                \ }

    let g:tag_highlight#ignored_tags['cpp'] = g:tag_highlight#ignored_tags['c']

    let g:tag_highlight#restored_groups = {
                \     'c':   ['cConstant', 'cStorageClass', 'cConditional', 'cRepeat', 'cType', 'cExtraConstants',
                \             'cAnsiFunction', 'cStatement', 'cPosixFunction', 'cExtraTypes', 'cGNUAutoType',
                \             'cExtentionFunc', 'cAssertion', 'cLinuxFunction', 'cAnsiName', 'cExtraOther',
                \             'cExtraNonStandard', 'cC11Function', 'arduinoConstant', 'arduinoFunc'],
                \     'go':  ['goExtraConstants', 'goStdlibFuncs', 'goBoolean']
                \ }

    let s:tmp_cpp_lst = copy(g:tag_highlight#restored_groups['c'])
    call extend(s:tmp_cpp_lst, ['cppStorageClass', 'cppType', 'cppAuto'])
    let g:tag_highlight#restored_groups['cpp'] = s:tmp_cpp_lst

    set tags=tags,../tags

    highlight link tag_highlight_EnumTag	Enum
    highlight link tag_highlight_FunctionTag	CFuncTag
    highlight link tag_highlight_MemberTag	CMember
    " highlight link mytags_GlobalVarTag	CMember
    highlight link tag_highlight_GlobalVarTag	GlobalVarTag

    highlight link goConstantTag	Enum
    highlight link goInterfaceTag	tag_highlight_ClassTag
    highlight link goGlobalVarTag	GlobalVarTag
    " highlight link goPackageTag		GlobalVarTag
    " highlight link pythonGlobalVarTag	Constant
    highlight link pythonGlobalVarTag	Enum
    highlight link tag_highlight_ClassTag	newClassColor
    highlight link tag_highlight_TemplateTag	newTemplateColor
    highlight link rustMacroTag newClassColor
    highlight link tag_highlight_ClassTag newClassColor

    nnoremap <leader>tag :THLUpdate<CR>
endif


if IsSourced('vim-perl')
    let g:perl_string_as_statement = 1
endif

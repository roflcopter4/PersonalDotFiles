# Filename:      /etc/skel/.zshrc
# Purpose:       config file for zsh (z shell)
# Authors:       (c) grml-team (grml.org)
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################
# Nowadays, grml's zsh setup lives in only *one* zshrc file.
# That is the global one: /etc/zsh/zshrc (from grml-etc-core).
# It is best to leave *this* file untouched and do personal changes to
# your zsh setup via ${HOME}/.zshrc.local which is loaded at the end of
# the global zshrc.
#
# That way, we enable people on other operating systems to use our
# setup, too, just by copying our global zshrc to their ${HOME}/.zshrc.
# Adjustments would still go to the .zshrc.local file.
################################################################################

################################################################################
###                                                                          ###
###  zplug                                                                   ###
###                                                                          ###
################################################################################

zplug load

################################################################################
###                                                                          ###
###  zplug end                                                               ###
###                                                                          ###
################################################################################


# Setup my theme
local MARK=21
local LoadTheme="myTheme_MK${MARK}"
local ThemeName="${HOME}/personaldotfiles/zsh/themes/${LoadTheme}.zsh-theme"
# local ThemeName='/home/bml/Downloads/personaldotfiles/zsh/themes/myTheme_MK19.zsh-theme'
if [[ -f "$ThemeName" ]]; then
    # Necessary to use my prompt apparently.
    prompt off
    # Load in my theme the old fashioned way.
    DEBUG_THEME=false
    source "$ThemeName"
else
    echo "Theme not found!" >&2
fi

local SourceIfExist() {
    [[ -f "$1" ]] && source "$1"
}


# SOME SPECIFIC CONFIG I CAN'T PRESENTLY BE BOTHERED TO PUT SOMEWHERE ELSE
zstyle ':completion:*'               menu select=2

# ============== Various settings
command -v 'thefuck' >/dev/null 2>&1 && eval $(thefuck --alias)
setopt multios

# source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh

###############################################################################
# Select oh-my-zsh stuff
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus
setopt globstarshort

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

alias -- -='cd -'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'
###############################################################################

# -------------------------------------------------------------------------------
# KEY BINDINGS

#bindkey -v
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
autoload -U edit-command-line
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
zle -N edit-command-line

bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

bind2maps emacs viins vicmd -- Up        up-line-or-beginning-search
bind2maps emacs viins vicmd -- Down      down-line-or-beginning-search
bind2maps emacs viins vicmd -- -s '^x^e' edit-command-line

bind2maps       viins       -- -s '^a'   beginning-of-somewhere
bind2maps       viins       -- -s '^e'   end-of-somewhere
bind2maps       viins       -- -s '^h'   backward-delete-char
bind2maps       viins       -- -s '^?'   backward-delete-char
bind2maps       viins       -- -s '^w'   backward-kill-word


# -------------------------------------------------------------------------------
# Environment Variables

export IS_ZSH='true'
SourceIfExist "${HOME}/.aliases"
compdef _directories smartcd

# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[[ $- == *i* ]] && source "/usr/local/share/fzf/shell/completion.zsh" 2> /dev/null

#[[ "$(command -v ag)" ]] && export FZF_DEFAULT_COMMAND='ag --hidden -u --ignore .git --ignore .vimbackup --ignore .vimviews --ignore .vimundo -g ""'
#[[ "$(command -v rg)" ]] && export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g '!{.git,node_modules,.vimviews,.vimundo,.vimswap,.vimbackup,.cache,.wine,.steam,.Steam,proc,run}/'\"*\" 2>/dev/null"
export LESS='-R -M --shift 5 -i'
export DISTCC_HOSTS="${DISTCC_HOSTS}${DISTCC_HOSTS:+:}+zeroconf"
export MANWIDTH=120
export HISTSIZE=10000000000
export HIGHLIGHT_OPTIONS='-l -t8 --out-format=truecolor --force --style=myMolokai'

SourceIfExist "${HOME}/.local/etc/profile.d/autojump.sh"


# Lazy solution to platform specific stuff.
[[ -f "${HOME}/.localconfig.zsh" ]] && mv "${HOME}/.localconfig.zsh" "${HOME}/.Localconfig.zsh"
SourceIfExist "${HOME}/.Localconfig.zsh"

# -------------------------------------------------------------------------------
# Functions


xcd() {
    [[ "$(command -v xtar)" ]] || { echo "xtar not found!"; exit 1; }

    local OutDir
    local Timestamp=$(date +%s)
    local Archive="$1"
    local base="$(echo "$Archive" | perl -pe 's/(.*?)\.(tar.*|tgz|txz|tbz)/$1/')"

    [[ "$base" == "$Archive" ]] && base="$(echo "$Archive" | perl -pe 's/(.*?)\.(zip|rar|7z|gz|bz2|xz)/$1/')"
    [[ "$base" == "$Archive" ]] && base="$(echo "$Archive" | perl -pe 's/(.*?)\.*$/$1/')"
    [[ -e "$base" ]] && OutDir="${base}-${Timestamp}" || OutDir="$base"

    xtar "$Archive" "$OutDir" && cd "$OutDir"
}


dwx() {
    if [[ "$#" -eq 0 ]] || [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
        printf "%s\n\n%s%s\n" "USAGE: $0 [ DOWNLOAD ... ]" "Downloads a " \
               "tarball and automatically extracts and cd's to its directory." 
        return 1
    fi

    file_list=( )
    # The shell throws an error if it tries to glob in an empty directory.
    [[ "$(\ls)" ]] && for file in *; do
        file_list+="$file"
    done

    aria2c "$@" || return $?
    candidate=''

    if [[ "$(\ls)" ]]; then
        for file in *; do
            if ! [[ ${file_list[(i)$file]} -le ${#file_list} ]]; then
                candidate="$file"
                break
            fi
        done
    else
        echo "ERROR: No files in directory; download failed?"
        return 4
    fi

    if [[ "$candidate" ]]; then
        echo ''
        xcd "$candidate"
    else
        echo "ERROR: No candidate file found; nothing to extract."
        return 3
    fi
}


[[ "$SYSID" =~ 'gentoo' ]] && \
wutall() {
    local i A first w
    for i in "${1:-.}/"*; do
        [ -d "$i" ] && {
            printf "%s \\ " "$(Colorize - <<< "bYELLOW(<<${i##*/}>>)")"
            A=( $(wut "${i}") ) 
            first=true
            for w in "${A[@]}"; do
                if ${first}; then
                    printf "%s" "${w/DESCRIPTION=\"/}"
                    first=false
                elif [[ "${w}" =~ 'DESCRIPTION=' ]]; then
                    break
                else
                    printf " ${w/\"/}"
                fi
            done
            echo
        }
    done | column -t -s'\' -o'- '
}


COL() {(
    local PROGTYPE
    setopt shwordsplit
    [[ $# -gt 0 ]] && ! [[ "$1" =~ '^-' ]] && PROGTYPE=" --syntax=$1" && shift
    ${LESSCOLORIZER}${PROGTYPE} "$@"
)}


setx() {
    (
        set -x
        eval '"$@"'
    )
}


# =============================================================================
# =============================================================================
# =============================================================================
# End my stuff
# =============================================================================
# =============================================================================
# =============================================================================



## Settings for umask
#if (( EUID == 0 )); then
#    umask 002
#else
#    umask 022
#fi

## Now, we'll give a few examples of what you might want to use in your
## .zshrc.local file (just copy'n'paste and uncomment it there):

## Prompt theme extension ##

# Virtualenv support

#function virtual_env_prompt () {
#    REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
#}
#grml_theme_add_token  virtual-env -f virtual_env_prompt '%F{magenta}' '%f'
#zstyle ':prompt:grml:left:setup' items rc virtual-env change-root user at host path vcs percent

## ZLE tweaks ##

## use the vi navigation keys (hjkl) besides cursor keys in menu completion
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

## set command prediction from history, see 'man 1 zshcontrib'
#is4 && zrcautoload predict-on && \
#zle -N predict-on         && \
#zle -N predict-off        && \
#bindkey "^X^Z" predict-on && \
#bindkey "^Z" predict-off

## press ctrl-q to quote line:
#mquote () {
#      zle beginning-of-line
#      zle forward-word
#      # RBUFFER="'$RBUFFER'"
#      RBUFFER=${(q)RBUFFER}
#      zle end-of-line
#}
#zle -N mquote && bindkey '^q' mquote

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
#WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
#WORDCHARS=.
#WORDCHARS='*?_[]~=&;!#$%^(){}'
#WORDCHARS='${WORDCHARS:s@/@}'

# just type '...' to get '../..'
#rationalise-dot() {
#local MATCH
#if [[ $LBUFFER =~ '(^|/| |	|'$'\n''|\||;|&)\.\.$' ]]; then
#  LBUFFER+=/
#  zle self-insert
#  zle self-insert
#else
#  zle self-insert
#fi
#}
#zle -N rationalise-dot
#bindkey . rationalise-dot
## without this, typing a . aborts incremental history search
#bindkey -M isearch . self-insert

## compsys related snippets ##

## changed completer settings
#zstyle ':completion:*' completer _complete _correct _approximate
#zstyle ':completion:*' expand prefix suffix

## another different completer setting: expand shell aliases
#zstyle ':completion:*' completer _expand_alias _complete _approximate

## aliases ##

## translate
#alias u='translate -i'

## instead of global aliase it might be better to use grmls $abk assoc array, whose contents are expanded after pressing ,.
#$abk[SnL]="| sort -n | less"

## miscellaneous code ##

## variation of our manzsh() function; pick you poison:
manzsh()  { /usr/bin/man zshall |  most +/"$1" ; }

## Switching shell safely and efficiently? http://www.zsh.org/mla/workers/2001/msg02410.html
bash() {
    NO_SWITCH="yes" command bash "$@"
}
restart () {
    exec $SHELL $SHELL_ARGS "$@"
}

## Handy functions for use with the (e::) globbing qualifier (like nt)
#contains() { grep -q "$*" $REPLY }
#sameas() { diff -q "$*" $REPLY &>/dev/null }
#ot () { [[ $REPLY -ot ${~1} ]] }

## Find out which libs define a symbol
#lcheck() {
#    if [[ -n "$1" ]] ; then
#        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1"
#    else
#        echo "Usage: lcheck <function>" >&2
#    fi
#}

## Memory overview
#memusage() {
#    ps aux | awk '{if (NR > 1) print $5;
#                   if (NR > 2) print "+"}
#                   END { print "p" }' | dc
#}

## print hex value of a number
#hex() {
#    emulate -L zsh
#    if [[ -n "$1" ]]; then
#        printf "%x\n" $1
#    else
#        print 'Usage: hex <number-to-convert>'
#        return 1
#    fi
#}
